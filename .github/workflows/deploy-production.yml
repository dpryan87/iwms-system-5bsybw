# Production Deployment Workflow for IWMS
# Version: 1.0.0
# Handles multi-region deployment with high availability requirements and strict validation gates

name: Deploy to Production

# Trigger on main branch pushes or manual dispatch
on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      deploy_infra:
        type: boolean
        description: 'Deploy infrastructure changes'
        default: false
      rollback_version:
        type: string
        description: 'Version tag to rollback to'
        required: false
      skip_db_migration:
        type: boolean
        description: 'Skip database migration steps'
        default: false

# Environment configuration
env:
  AWS_PRIMARY_REGION: us-west-2
  AWS_SECONDARY_REGIONS: us-east-1,eu-west-1
  TF_WORKSPACE: production
  ENVIRONMENT: production
  HEALTH_CHECK_THRESHOLD: 99.9
  DEPLOYMENT_STRATEGY: blue-green

# Concurrency control to prevent parallel deployments
concurrency:
  group: production
  cancel-in-progress: false

jobs:
  infrastructure:
    name: Deploy Infrastructure
    if: ${{ github.event.inputs.deploy_infra == 'true' }}
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.app_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_PRIMARY_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Initialize Terraform
        run: |
          terraform init -backend=true
          terraform workspace select ${{ env.TF_WORKSPACE }}
        working-directory: infrastructure/terraform/environments/production

      - name: Validate Terraform
        run: terraform validate
        working-directory: infrastructure/terraform/environments/production

      - name: Plan infrastructure changes
        id: plan
        run: |
          terraform plan -detailed-exitcode -out=tfplan \
            -var="environment=production" \
            -var="regions=${{ env.AWS_PRIMARY_REGION }},${{ env.AWS_SECONDARY_REGIONS }}"
        working-directory: infrastructure/terraform/environments/production

      - name: Apply infrastructure changes
        if: steps.plan.outputs.exitcode == 2
        run: terraform apply -auto-approve tfplan
        working-directory: infrastructure/terraform/environments/production

  deploy:
    name: Deploy Application
    needs: [infrastructure]
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.app_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: backend-dist

      - name: Download frontend artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend-dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_PRIMARY_REGION }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ steps.login-ecr.outputs.registry }}

      - name: Build and push backend image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from type=registry,ref=${{ env.ECR_REGISTRY }}/backend:cache \
            --cache-to type=registry,ref=${{ env.ECR_REGISTRY }}/backend:cache \
            --tag ${{ env.ECR_REGISTRY }}/backend:${{ github.sha }} \
            --tag ${{ env.ECR_REGISTRY }}/backend:latest \
            --file infrastructure/docker/backend.dockerfile \
            --push .

      - name: Build and push frontend image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from type=registry,ref=${{ env.ECR_REGISTRY }}/frontend:cache \
            --cache-to type=registry,ref=${{ env.ECR_REGISTRY }}/frontend:cache \
            --tag ${{ env.ECR_REGISTRY }}/frontend:${{ github.sha }} \
            --tag ${{ env.ECR_REGISTRY }}/frontend:latest \
            --file infrastructure/docker/frontend.dockerfile \
            --push .

      - name: Deploy to ECS
        id: deploy
        run: |
          # Create new task definitions
          aws ecs register-task-definition \
            --family backend-prod \
            --container-definitions file://infrastructure/ecs/backend-container.json

          aws ecs register-task-definition \
            --family frontend-prod \
            --container-definitions file://infrastructure/ecs/frontend-container.json

          # Update services with blue-green deployment
          aws ecs update-service \
            --cluster production \
            --service backend \
            --task-definition backend-prod \
            --deployment-configuration maximumPercent=200,minimumHealthyPercent=100

          aws ecs update-service \
            --cluster production \
            --service frontend \
            --task-definition frontend-prod \
            --deployment-configuration maximumPercent=200,minimumHealthyPercent=100

      - name: Run database migrations
        if: ${{ !github.event.inputs.skip_db_migration }}
        run: |
          npm run migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_CREDENTIALS }}

  verify:
    name: Verify Deployment
    needs: [deploy]
    runs-on: ubuntu-latest

    steps:
      - name: Health check - Primary region
        run: |
          for i in {1..5}; do
            HEALTH_STATUS=$(curl -s ${{ steps.deploy.outputs.app_url }}/health)
            if [[ $HEALTH_STATUS == *"healthy"* ]]; then
              echo "Health check passed"
              exit 0
            fi
            sleep 30
          done
          echo "Health check failed"
          exit 1

      - name: Health check - Secondary regions
        run: |
          IFS=',' read -ra REGIONS <<< "${{ env.AWS_SECONDARY_REGIONS }}"
          for region in "${REGIONS[@]}"; do
            HEALTH_STATUS=$(curl -s https://$region.${{ steps.deploy.outputs.base_url }}/health)
            if [[ $HEALTH_STATUS != *"healthy"* ]]; then
              echo "Health check failed in $region"
              exit 1
            fi
          done

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback Deployment
    if: failure() && !github.event.inputs.rollback_version
    needs: [verify]
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_PRIMARY_REGION }}

      - name: Rollback ECS services
        run: |
          # Get previous task definition
          PREVIOUS_TD=$(aws ecs describe-task-definition \
            --task-definition backend-prod \
            --previous-revision)

          # Rollback services
          aws ecs update-service \
            --cluster production \
            --service backend \
            --task-definition $PREVIOUS_TD \
            --deployment-configuration maximumPercent=200,minimumHealthyPercent=100

          aws ecs update-service \
            --cluster production \
            --service frontend \
            --task-definition $PREVIOUS_TD \
            --deployment-configuration maximumPercent=200,minimumHealthyPercent=100

      - name: Notify rollback status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: "Deployment rollback executed due to verification failure"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
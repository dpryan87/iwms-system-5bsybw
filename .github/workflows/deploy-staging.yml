# Staging Deployment Workflow
# Version: 1.0.0
# Handles infrastructure provisioning and application deployment to the staging environment
# with comprehensive verification and automated rollback capabilities

name: Deploy to Staging

# Workflow triggers
on:
  push:
    branches: 
      - develop
    paths:
      - 'src/**'
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      deploy_infra:
        description: 'Deploy infrastructure changes'
        type: boolean
        default: false
      force_deploy:
        description: 'Force deployment without verification'
        type: boolean
        default: false

# Environment configuration
env:
  AWS_REGION: us-east-1
  TF_WORKSPACE: staging
  ENVIRONMENT: staging
  DEPLOY_TIMEOUT: 1800

# Concurrency control to prevent parallel deployments
concurrency:
  group: staging
  cancel-in-progress: false

jobs:
  # Infrastructure deployment job
  infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: "github.event.inputs.deploy_infra == 'true'"
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Initialize Terraform
        working-directory: infrastructure/terraform/environments/staging
        run: |
          terraform init
          terraform workspace select staging || terraform workspace new staging

      - name: Detect Infrastructure Drift
        id: drift
        working-directory: infrastructure/terraform/environments/staging
        run: |
          terraform plan -detailed-exitcode
          echo "::set-output name=has_drift::$?"

      - name: Plan Infrastructure Changes
        if: steps.drift.outputs.has_drift != '0'
        working-directory: infrastructure/terraform/environments/staging
        run: |
          terraform plan -out=tfplan
          terraform show -json tfplan > plan.json

      - name: Apply Infrastructure Changes
        if: steps.drift.outputs.has_drift != '0'
        working-directory: infrastructure/terraform/environments/staging
        run: |
          terraform apply -auto-approve tfplan || {
            echo "Infrastructure deployment failed, initiating rollback..."
            terraform plan -destroy -out=destroy.tfplan
            terraform apply -auto-approve destroy.tfplan
            exit 1
          }

      - name: Verify Infrastructure Health
        run: |
          aws cloudwatch wait alarm-in-alarm \
            --alarm-names staging-infrastructure-health \
            --region ${{ env.AWS_REGION }}

  # Application deployment job
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [infrastructure]
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download frontend artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend-dist

      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: backend-dist

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Scan Backend Container
        uses: snyk/actions/docker@v2
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: backend
          args: --file=infrastructure/docker/backend.dockerfile --severity-threshold=high

      - name: Build and Push Backend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infrastructure/docker/backend.dockerfile
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/iwms-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Frontend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infrastructure/docker/frontend.dockerfile
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/iwms-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update ECS Services
        run: |
          aws ecs update-service \
            --cluster staging-cluster \
            --service backend-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          aws ecs update-service \
            --cluster staging-cluster \
            --service frontend-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for Deployment
        run: |
          aws ecs wait services-stable \
            --cluster staging-cluster \
            --services backend-service frontend-service \
            --region ${{ env.AWS_REGION }}

  # Deployment verification job
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    timeout-minutes: 20

    steps:
      - name: Run Health Checks
        run: |
          for i in {1..5}; do
            curl -f https://staging.iwms.example.com/health && break
            if [ $i -eq 5 ]; then
              echo "Health checks failed after 5 attempts"
              exit 1
            fi
            sleep 30
          done

      - name: Run Integration Tests
        run: |
          npm run test:e2e:staging

      - name: Verify Performance
        run: |
          npx artillery run performance-tests/staging.yml

      - name: Generate Deployment Report
        run: |
          echo "Deployment Status: Success" >> deployment-report.txt
          echo "Version: ${{ github.sha }}" >> deployment-report.txt
          echo "Environment: Staging" >> deployment-report.txt
          echo "Deployment Time: $(date)" >> deployment-report.txt

      - name: Upload Deployment Report
        uses: actions/upload-artifact@v3
        with:
          name: deployment-report
          path: deployment-report.txt
          retention-days: 30